.source.stan:
  'For':
    'prefix': 'for'
    'body': """
    for (${1:var} in ${2:start}:${3:end}) {
      ${4}'
    }
    """
  'If':
    'prefix': 'if'
    'body': """
    if (${1:condition}) {
      ${2}
    }
    """
  'Else If':
    'prefix': 'ei'
    'body': """
    else  if (${1:condition}) {
      ${2}
    }
    """
  'Lower':
    'prefix': "<l"
    'body': '<lower = ${1:expression}>$2'
  'Upper':
    'prefix': "<u"
    'content': '<upper = ${1:expression}>$2'
  'Lower/Upper'
    'prefix': "<lu"
    'content': '<lower = ${1:expression}, upper = ${2:expression}>'
  'While':
    'prefix': 'while'
    'content': """
    while (${1:condition}) {
      $2
    }
    """
  'Transformed Parameters':
    'prefix': 'tpar'
    'body': """
    transformed parameters {
      $1
    }
    """
  'Data':
    'prefix': 'data'
    'body': """
    data {
      $1
    }
    """
  'Transformed Data':
    'prefix': 'tdata'
    'body': """
    transformed data {
      $1
    }
    """
  'Generated Quantities':
    'prefix': 'gen'
    'body': """
    generated quantities {
      $1
    }
    """
  'Model':
    'prefix': 'mdl'
    'body': """
    model {
      $1
    }
    """
  'ODE':
    'prefix': 'ode'
    'body': 'integrate_ode(${1:function}, ${2:y0}, ${3:t0}, ${4:t}, ${5:theta}, ${6:x_r}, ${7:x_i});'
  'Function block':
    'prefix': 'funs'
    'body': """
    functions {
      $1
    }
    """
  'Function declaration':
    'prefix': 'fun'
    'body': """
    ${1:return} ${2:name} (${3:args}) {
      $4
    }
    """
