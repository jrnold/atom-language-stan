name: "Stan"
scopeName: "source.stan"
'fileTypes': [
	"stan"
	,
]
'patterns': [
	{
		include: "#double-slash"
	}
	{
		include: "#pound-sign"
	}
	{
		include: "#block-comment"
	}
	{
		begin: "^\\s*(data|transformed data|parameters|transformed parameters|model|generated quantities|functions)\\s*{"
		end: "}"
		beginCaptures:
			"1":
				name: "keyword.control.block-names.stan"
		contentName: "meta.block.major.stan"
		patterns: [
			{
				include: "#double-slash"
			}
			{
				include: "#pound-sign"
			}
			{
				include: "#block-comment"
			}
			{
				include: "#string"
			}
			{
				include: "#type"
			}
			{
				include: "#range"
			}
			{
				include: "#control-flow"
			}
			{
				include: "#cpp-conflict"
			}
			{
				include: "#distributions"
			}
			{
				include: "#cdfs"
			}
			{
				include: "#spec-vals"
			}
			{
				include: "#math-fns"
			}
			{
				include: "#other-fns"
			}
			{
				include: "#lp"
			}
			{
				include: "#double-underscore"
			}
			{
				include: "#vars"
			}
			{
				include: "#real-a"
			}
			{
				include: "#real-b"
			}
			{
				include: "#real-c"
			}
			{
				include: "#integer"
			}
			{
				include: "#block"
			}
		]
	}
	{
		match: "[^\\s]+(\\s*[^\\s]+)?"
		name: "invalid.illegal.top-level"
	}
]
repository:
	"double-slash":
		match: "//.*$"
		name: "comment.line.double-slash.stan"
	"pound-sign":
		match: "#.*$"
		name: "comment.line.number-sign.stan"
	"block-comment":
		begin: "/\\*"
		end: "\\*/"
		name: "comment.block.slashes"
	string:
		begin: "\""
		end: "\""
		name: "string.quoted.double.stan"
		patterns: [
			{
				match: "(\\p{^ASCII}|\\p{Cntrl}|\\\\)+"
				name: "invalid.illegal.quoted.bad-char.stan"
			}
		]
	type:
		match: "\\b(int|real|vector|simplex|ordered|positive_ordered|row_vector|matrix|corr_matrix|cov_matrix)\\b"
		name: "storage.type.stan"
	"cpp-conflict":
		match: "\\b(alignas|alignof|and|and_eq|asm|auto|bitand|bitor|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|false|float|friend|goto|if|inline|long|mutable|namespace|new|noexcept|not|not_eq|nullptr|operator|or|or_eq|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|true|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while|xor|xor_eq)\\b"
		name: "invalid.illegal.cpp-conflict.stan"
		comment: "reserved words in C++ that are invalid in Stan"
	range:
		match: "\\b(lower|upper)\\b"
		name: "keyword.other.range.stan"
	"control-flow":
		match: "\\b(for|in|while|repeat|until|if|then|else|return)\\b"
		name: "keyword.control.stan"
	distributions:
		match: "\\b(bernoulli|bernoulli_logit|binomial|binomial_logit|beta_binomial|hypergeometric|categorical|ordered_logistic|neg_binomial|poisson|poisson_log|multinomial|normal|student_t|cauchy|double_exponential|logistic|lognormal|chi_square|inv_chi_square|scaled_inv_chi_square|exponential|gamma|inv_gamma|weibull||pareto|beta|uniform|dirichlet|multi_normal|multi_normal_cholesky|multi_student_t|wishart|inv_wishart|lkj_cov|lkj_corr|lkj_corr_cholesky_log)(_log)?\\b"
		name: "support.function.distribution.pdf.stan"
	cdfs:
		match: "\\b(normal|lognormal|exponential|weibull)_cdf\\b"
		name: "support.function.distribution.cdf.stan"
	"spec-vals":
		match: "\\bnot_a_number|positive_infinity|negative_infinity|epsilon|negative_epsilon\\b"
		name: "support.function.special-value.stan"
	"math-fns":
		match: "\\b(abs|int_step|fabs|fdim|min|max|pi|e|sqrt2|log2|log10|if_else|step|fmin|fmax|fmod|floor|ceil|round|trunc|sqrt|cbrt|square|exp|exp2|log|pow|hypot|cos|sin|tan|acos|asin|atan|atan2|cosh|sinh|tanh|acosh|asinh|atanh|logit|inv_logit|inv_cloglog|erf|erfc|Phi|Phi_approx|binary_log_loss|tgamma|lgamma|lmgamma|lbeta|binomial_coefficient_log|expm1|fma|multiply_log|log1p|log1m|log1p_exp|log_sum_exp|log_inv_logit|log1m_inv_logit|sum|prod|mean|variance|sd|rows|cols|cumulative_sum|dot_product|dot_self|tcrossprod|crossprod|multiply_lower_tri_self_transpose|diag_pre_multiply|diag_post_multiply|diagonal|diag_matrix|col|row|block|softmax|mdivide_right_tri_low|mdivide_left_tri_low|trace|determinant|inverse|eigenvalues_sym|eigenvectors_sym|cholesky_decompose|singular_values)\\b"
		name: "support.function.math.stan"
	"other-fns":
		match: "\\bprint\\b"
		name: "support.function.other.stan"
	lp:
		match: "\\blp__\\b"
		name: "variable.language.logprob.stan"
	"double-underscore":
		match: "\\b[a-zA-Z][a-zA-Z0-9_]*__\\b"
		name: "invalid.illegal.variable.double-underscore.stan"
	vars:
		match: "\\b[a-zA-Z][a-zA-Z0-9_]*\\b"
		name: "variable.other.stan"
	"real-a":
		match: "-?(0|[1-9]\\d*)?\\.\\d+([eE]-?(0|[1-9]\\d*))?"
		comment: "have a point with numbers after, maybe an exponent"
		name: "constant.numeric.real.stan"
	"real-b":
		match: "-?(0|[1-9]\\d*)\\.\\d*([eE]-?(0|[1-9]\\d*))?"
		comment: "have a point with numbers before, maybe an exponent"
		name: "constant.numeric.real.stan"
	"real-c":
		match: "-?(0|[1-9]\\d*)[eE]-?(0|[1-9]\\d*)"
		comment: "no point, have an exponent"
		name: "constant.numeric.real.stan"
	integer:
		match: "-?(0|[1-9]\\d*)"
		name: "constant.numeric.integer.stan"
	block:
		begin: "{"
		end: "}"
		contentName: "meta.block.minor.stan"
		patterns: [
			{
				include: "#double-slash"
			}
			{
				include: "#pound-sign"
			}
			{
				include: "#block-comment"
			}
			{
				include: "#string"
			}
			{
				include: "#type"
			}
			{
				include: "#range"
			}
			{
				include: "#control-flow"
			}
			{
				include: "#cpp-conflict"
			}
			{
				include: "#distributions"
			}
			{
				include: "#cdfs"
			}
			{
				include: "#spec-vals"
			}
			{
				include: "#math-fns"
			}
			{
				include: "#other-fns"
			}
			{
				include: "#lp"
			}
			{
				include: "#double-underscore"
			}
			{
				include: "#vars"
			}
			{
				include: "#real-a"
			}
			{
				include: "#real-b"
			}
			{
				include: "#real-c"
			}
			{
				include: "#integer"
			}
			{
				include: "#block"
			}
		]
