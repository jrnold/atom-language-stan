'name': "Stan"
'scopeName': "source.stan"
'fileTypes': [ "stan" ]
'patterns': [
  {
    include: "#comment-number-sign"
  }
  {
    include: "#comment-block-comment"
  }
  {
    include: "#comment-double-slash"
  }
  {
    include: "#string"
  }
  {
    include: "#block-declaration"
  }
  {
    include: "#control-flow"
  }
  {
    include: "#type"
  }
  {
    include: "#range"
  }
  {
    include: "cpp-reserved"
  }
  {
    include: "#lp"
  }
  {
    include: "#specia-functions"
  }
  {
    include: "#vars"
  }
  {
    include: "#illegal-variable-1"
  }
  {
    include: "#illegal-variable-2"
  }
  {
    include: "#real-a"
  }
  {
    include: "#real-b"
  }
  {
    include: "#real-c"
  }
  {
    include: "#integer"
  }
]
repository:
  "comment-double-slash":
    match: "//.*$"
    name: "comment.line.double-slash.stan"
  "comment-number-sign":
    match: "#.*$"
    name: "comment.line.number-sign.stan"
  "comment-block-comment":
    begin: "/\\*"
    end: "\\*/"
    name: "comment.block.slashes"
  string:
    begin: "\""
    end: "\""
    name: "string.quoted.double.stan"
    patterns: [
      {
        match: "(\\p{^ASCII}|\\p{Cntrl}|\\\\)+"
        name: "invalid.illegal.quoted.bad-char.stan"
      }
    ]
  "block-declaration":
    match: "\\b(data|transformed\\s+data|parameters|transformed\\s+parameters|model|generated\\s+quantities|functions)\\b"
    name: "entity.name.type.stan"
  type:
    match: "\\b(int|real|vector|simplex|ordered|positive_ordered|row_vector|matrix|corr_matrix|cov_matrix|cholesky_factor_cov|cholesky_factor_corr|void)\\b"
    name: "storage.type.stan"
  "control-flow":
    match: "\\b(for|in|while|repeat|until|if|then|else|return)\\b"
    name: "keyword.control.stan"
  "truncation-operator":
    match: "\\bT\\s*\["
    name: "keyword.other.truncation.stan"
  "cpp-reserved":
    match: "\\b(alignas|alignof|and|and_eq|asm|auto|bitand|bitor|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|false|float|friend|goto|if|inline|long|mutable|namespace|new|noexcept|not|not_eq|nullptr|operator|or|or_eq|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|true|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while|xor|xor_eq)\\b"
    name: "invalid.illegal.cpp-conflict.stan"
    comment: "reserved words in C++ that are invalid in Stan"
  range:
    match: "\\b(lower|upper)\\b"
    name: "keyword.other.range.stan"
  "special-functions":
    match: "\\b(print|reject|integrate_ode|increment_log_prob)\\b"
    name: "keyword.other.special-functions.stan"
  lp:
    match: "\\blp__\\b"
    name: "invalid.deprecated.lp.stan"
  vars:
    match: "\\b[a-zA-Z][a-zA-Z0-9_]*\\b"
    name: "variable.other.stan"
  "illegal-variable-1":
    match: "\\b[a-zA-Z][a-zA-Z0-9_]*__\\b"
    name: "invalid.illegal.variable.double-underscore.stan"
  "illegal-variable-2":
    match: "\\b[0-9_]+[a-zA-Z_]+[a-zA-Z0-9_]*\\b"
    name: "invalid.illegal.variable.nonalphafirst"
  "real-a":
    match: "\\b-?(0|[1-9]\\d*)?\\.\\d+([eE]-?(0|[1-9]\\d*))?\\b"
    comment: "have a point with numbers after, maybe an exponent"
    name: "constant.numeric.real.stan"
  "real-b":
    match: "\\b-?(0|[1-9]\\d*)\\.\\d*([eE]-?(0|[1-9]\\d*))?\\b"
    comment: "have a point with numbers before, maybe an exponent"
    name: "constant.numeric.real.stan"
  "real-c":
    match: "\\b-?(0|[1-9]\\d*)[eE]-?(0|[1-9]\\d*)\\b"
    comment: "no point, have an exponent"
    name: "constant.numeric.real.stan"
  integer:
    match: "-?(0|[1-9]\\d*)"
    name: "constant.numeric.integer.stan"
